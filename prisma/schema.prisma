// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid()) @map("_id")
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Room          Room[]
  Settings      Settings[]
  Chat          Chat[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id          String     @id @default(cuid()) @map("_id")
  name        String     @unique
  description String
  visibility  Visibility @default(UNLISTED)
  password    String?
  owner       User       @relation(fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Chat        Chat[]
}

model Settings {
  id String @id @default(cuid()) @map("_id")

  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Visibility {
  UNLISTED
  PUBLIC
  PRIVATE
}

model Chat {
  id      String @id @default(cuid()) @map("_id")
  content String
  room    Room   @relation(fields: [roomId], references: [id])
  roomId  String
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
